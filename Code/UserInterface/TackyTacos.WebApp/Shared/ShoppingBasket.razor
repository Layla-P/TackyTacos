@using TackyTacos.WebApp.DummyData
@using TackyTacos.WebApp.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text
@using System.Net.Mime
@inject IHttpClientFactory HttpClientFactory

<nav class="navbar fixed-bottom navbar-light bg-light">
  <div class="container-fluid">
   @if (Order.Tacos.Any())
		{
		 <div class="basket-contents">
		  <h2>Your basket</h2>

				@foreach (var configuredTaco in Order.Tacos)
				{
			  <ConfiguredTacoItem Taco="configuredTaco" OnRemoved="@(() => RemoveConfiguredTaco(configuredTaco))" />
				}
		 </div>
		}
		else
		{
		 <div class="empty-cart">Choose a taco<br>to get started</div>
		}

	 <div class="basket-total @(Order.Tacos.Any() ? "" : "hidden")">
	  Total:
	  <span class="total-price">@Order.GetFormattedTotalPrice()</span>
	  <button class="btn btn-warning" disabled="@(Order.Tacos.Count == 0)" @onclick="PlaceOrder">
	   Order >
	  </button>
	 </div>
  </div>
</nav>


@code {
	[Parameter] public Order Order { get; set; }
	[Parameter] public DummyUser User { get; set; }

	void RemoveConfiguredTaco(Taco taco)
	{
		Order.Tacos.Remove(taco);
	}

	async Task PlaceOrder()
	{
		Console.WriteLine("Placing order");
		try
		{
			Order.UserId = User.Id;
			Console.WriteLine(Order.TotalPrice.ToString());
			var client = HttpClientFactory.CreateClient("OrderService");
			var orderString = JsonSerializer.Serialize(Order);
			var content = new StringContent(orderString, Encoding.UTF8, MediaTypeNames.Application.Json );
			
			var response = await client.PostAsync("orders", content);
			Console.WriteLine($"Status code from Order Service:{response}!");
			//Check if user is loggedIn for now assume they are and use dummy userId

			Console.WriteLine($"Order placed with user id:{User.Id} and order id:{Order.Id}!");
			Order = new();
			StateHasChanged();
		}
		catch(Exception ex)
		{
			Console.WriteLine(ex);
		}
		
	}
}